generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model employee {
  id             String       @id
  employeeTypeId String
  employeeType   employeeType @relation(fields: [employeeTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user         @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model employeeType {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  color                  String?                  @default("#000000")
  protected              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  employee               employee[]
  employeeTypePermission employeeTypePermission[]
}

model employeeTypePermission {
  employeeTypeId String
  featureId      String
  create         Boolean      @default(false)
  delete         Boolean      @default(false)
  update         Boolean      @default(false)
  view           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?
  employeeType   employeeType @relation(fields: [employeeTypeId], references: [id], onDelete: Cascade)
  feature        feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([employeeTypeId, featureId])
}

model feature {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  employeeTypePermission employeeTypePermission[]
}

model user {
  id                                                          String                  @id
  email                                                       String                  @unique
  firstName                                                   String
  lastName                                                    String
  fullName                                                    String?                 @default(dbgenerated("((\"firstName\" || ' '::text) || \"lastName\")"))
  about                                                       String                  @default("")
  avatarUrl                                                   String?
  active                                                      Boolean?                @default(true)
  emailVerified                                               DateTime?
  createdAt                                                   DateTime                @default(now())
  updatedAt                                                   DateTime?
  employee                                                    employee?
  membership                                                  membership[]
  supplier                                                    supplier[]
  userAttribute_userTouserAttribute_createdBy                 userAttribute[]         @relation("userTouserAttribute_createdBy")
  userAttribute_userTouserAttribute_updatedBy                 userAttribute[]         @relation("userTouserAttribute_updatedBy")
  userAttributeCategory_userTouserAttributeCategory_createdBy userAttributeCategory[] @relation("userTouserAttributeCategory_createdBy")
  userAttributeCategory_userTouserAttributeCategory_updatedBy userAttributeCategory[] @relation("userTouserAttributeCategory_updatedBy")
  userAttributeValue_userTouserAttributeValue_createdBy       userAttributeValue[]    @relation("userTouserAttributeValue_createdBy")
  userAttributeValue_userTouserAttributeValue_updatedBy       userAttributeValue[]    @relation("userTouserAttributeValue_updatedBy")
  userAttributeValue_userTouserAttributeValue_userId          userAttributeValue[]    @relation("userTouserAttributeValue_userId")
  userAttributeValue_userTouserAttributeValue_valueUser       userAttributeValue[]    @relation("userTouserAttributeValue_valueUser")

  @@index([fullName], map: "user_fullName_key")
}

model group {
  id                                         String       @id @default(dbgenerated("uuid_generate_v4()"))
  name                                       String
  isIdentityGroup                            Boolean      @default(false)
  isEmployeeTypeGroup                        Boolean      @default(false)
  createdAt                                  DateTime     @default(now())
  updatedAt                                  DateTime?
  membership_groupTomembership_groupId       membership[] @relation("groupTomembership_groupId")
  membership_groupTomembership_memberGroupId membership[] @relation("groupTomembership_memberGroupId")
}

model membership {
  id                                    Int     @id @default(autoincrement())
  groupId                               String
  memberGroupId                         String?
  memberUserId                          String?
  group_groupTomembership_groupId       group   @relation("groupTomembership_groupId", fields: [groupId], references: [id], onDelete: Cascade)
  group_groupTomembership_memberGroupId group?  @relation("groupTomembership_memberGroupId", fields: [memberGroupId], references: [id], onDelete: Cascade)
  user                                  user?   @relation(fields: [memberUserId], references: [id], onDelete: Cascade)

  @@unique([groupId, memberGroupId, memberUserId], map: "uq_membership")
  @@index([groupId], map: "index_membership_groupid")
  @@index([memberGroupId], map: "index_membership_membergroupid")
  @@index([memberUserId], map: "index_membership_memberuserid")
}

model attributeDataType {
  id            Int             @id @default(autoincrement())
  label         String
  isBoolean     Boolean         @default(false)
  isDate        Boolean         @default(false)
  isList        Boolean         @default(false)
  isNumeric     Boolean         @default(false)
  isText        Boolean         @default(false)
  isUser        Boolean         @default(false)
  userAttribute userAttribute[]
}

model userAttribute {
  id                                 Int                   @id @default(autoincrement())
  name                               String
  sortOrder                          Int                   @default(1)
  userAttributeCategoryId            Int
  attributeDataTypeId                Int
  listOptions                        String[]
  canSelfManage                      Boolean?              @default(false)
  active                             Boolean?              @default(true)
  createdAt                          DateTime              @default(now())
  createdBy                          String
  updatedAt                          DateTime?
  updatedBy                          String?
  attributeDataType                  attributeDataType     @relation(fields: [attributeDataTypeId], references: [id], onDelete: Cascade)
  user_userTouserAttribute_createdBy user                  @relation("userTouserAttribute_createdBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_userTouserAttribute_updatedBy user?                 @relation("userTouserAttribute_updatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userAttributeCategory              userAttributeCategory @relation(fields: [userAttributeCategoryId], references: [id], onDelete: Cascade)
  userAttributeValue                 userAttributeValue[]
}

model userAttributeCategory {
  id                                         Int             @id @default(autoincrement())
  name                                       String
  public                                     Boolean?        @default(false)
  protected                                  Boolean?        @default(false)
  active                                     Boolean?        @default(true)
  createdAt                                  DateTime        @default(now())
  createdBy                                  String
  updatedAt                                  DateTime?
  updatedBy                                  String?
  user_userTouserAttributeCategory_createdBy user            @relation("userTouserAttributeCategory_createdBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_userTouserAttributeCategory_updatedBy user?           @relation("userTouserAttributeCategory_updatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userAttribute                              userAttribute[]
}

model userAttributeValue {
  id                                      Int           @id @default(autoincrement())
  userAttributeId                         Int
  userId                                  String
  valueBoolean                            Boolean?
  valueDate                               DateTime?     @db.Date
  valueNumeric                            Decimal?      @db.Decimal
  valueText                               String?
  valueUser                               String?
  createdAt                               DateTime      @default(now())
  createdBy                               String
  updatedAt                               DateTime?
  updatedBy                               String?
  user_userTouserAttributeValue_createdBy user          @relation("userTouserAttributeValue_createdBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_userTouserAttributeValue_updatedBy user?         @relation("userTouserAttributeValue_updatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userAttribute                           userAttribute @relation(fields: [userAttributeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_userTouserAttributeValue_userId    user          @relation("userTouserAttributeValue_userId", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_userTouserAttributeValue_valueUser user?         @relation("userTouserAttributeValue_valueUser", fields: [valueUser], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userAttributeId, userId], map: "uq_userattributeid_userid")
}

model address {
  id               Int                @id @default(autoincrement())
  addressLine1     String?
  addressLine2     String?
  city             String?
  stateId          Int?
  countryId        Int?
  phone            String?
  fax              String?
  country          country?           @relation(fields: [countryId], references: [id])
  state            state?             @relation(fields: [stateId], references: [id])
  supplierLocation supplierLocation[]
}

model country {
  id      Int       @id @default(autoincrement())
  name    String
  code    String
  address address[]
  state   state[]
}

model state {
  id        Int       @id @default(autoincrement())
  name      String
  countryId Int?
  country   country?  @relation(fields: [countryId], references: [id])
  address   address[]
}

model supplier {
  id               String             @id @default(dbgenerated("uuid_generate_v4()"))
  name             String             @unique(map: "supplier_name_unique")
  description      String?
  supplierTypeId   Int?
  supplierStatusId Int?
  taxId            String?            @unique(map: "supplier_taxId_unique")
  taxable          Boolean?           @default(true)
  established      DateTime?          @db.Date
  accountManagerId String?
  logo             String?
  website          String?
  twitter          String?
  facebook         String?
  instagram        String?
  linkedin         String?
  github           String?
  youtube          String?
  twitch           String?
  discord          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  user             user?              @relation(fields: [accountManagerId], references: [id])
  supplierStatus   supplierStatus?    @relation(fields: [supplierStatusId], references: [id])
  supplierType     supplierType?      @relation(fields: [supplierTypeId], references: [id])
  supplierLocation supplierLocation[]
}

model supplierLocation {
  id         Int      @id @default(autoincrement())
  supplierId String
  addressId  Int
  address    address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  supplier   supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
}

model supplierStatus {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  supplier  supplier[]
}

model supplierType {
  id        Int        @id @default(autoincrement())
  name      String
  color     String?    @default("#000000")
  protected Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  supplier  supplier[]
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id            String                   @id @default(cuid())
  email         String                   @unique
  firstName     String
  lastName      String
  emailVerified DateTime?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime?                @updatedAt
  Employee      Employee?
}

model EmployeeType {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  color                  String?                  @default("#000000")
  protected              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  Employee               Employee[]
  employeeTypePermission EmployeeTypePermission[]
}

model Feature {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  employeeTypePermission EmployeeTypePermission[]
}

model EmployeeTypePermission {
  employeeTypeId String
  moduleId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  create         Boolean      @default(false)
  delete         Boolean      @default(false)
  update         Boolean      @default(false)
  view           Boolean      @default(false)
  employeeType   EmployeeType @relation(fields: [employeeTypeId], references: [id], onDelete: Cascade)
  module         Feature       @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([employeeTypeId, moduleId])
}

model Employee {
  id             String       @id
  employeeTypeId String
  EmployeeType   EmployeeType @relation(fields: [employeeTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User           User         @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model employee {
  id             String       @id
  employeeTypeId String
  employeeType   employeeType @relation(fields: [employeeTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user         @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model employeeType {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  color                  String?                  @default("#000000")
  protected              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  employee               employee[]
  employeeTypePermission employeeTypePermission[]
}

model employeeTypePermission {
  employeeTypeId String
  featureId      String
  create         Boolean      @default(false)
  delete         Boolean      @default(false)
  update         Boolean      @default(false)
  view           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?
  employeeType   employeeType @relation(fields: [employeeTypeId], references: [id], onDelete: Cascade)
  feature        feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([employeeTypeId, featureId])
}

model feature {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  employeeTypePermission employeeTypePermission[]
}

model user {
  id            String       @id
  email         String       @unique
  firstName     String
  lastName      String
  fullName      String?      @unique @default(dbgenerated("((\"firstName\" || ' '::text) || \"lastName\")"))
  emailVerified DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?
  employee      employee?
  membership    membership[]
}

model group {
  id                                         String       @id @default(dbgenerated("uuid_generate_v4()"))
  name                                       String
  isIdentityGroup                            Boolean      @default(false)
  isEmployeeTypeGroup                        Boolean      @default(false)
  createdAt                                  DateTime     @default(now())
  updatedAt                                  DateTime?
  membership_groupTomembership_groupId       membership[] @relation("groupTomembership_groupId")
  membership_groupTomembership_memberGroupId membership[] @relation("groupTomembership_memberGroupId")
}

model membership {
  id                                    Int     @id @default(autoincrement())
  groupId                               String
  memberGroupId                         String?
  memberUserId                          String?
  group_groupTomembership_groupId       group   @relation("groupTomembership_groupId", fields: [groupId], references: [id], onDelete: Cascade)
  group_groupTomembership_memberGroupId group?  @relation("groupTomembership_memberGroupId", fields: [memberGroupId], references: [id], onDelete: Cascade)
  user                                  user?   @relation(fields: [memberUserId], references: [id], onDelete: Cascade)

  @@unique([groupId, memberGroupId, memberUserId], map: "uq_membership")
}
